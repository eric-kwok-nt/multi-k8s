apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment
spec: 
  replicas: 3
  selector: 
  # Specify the selector that the Deployment is going to use, to find these sets of Pods that it is going to control 
    matchLabels:
      component: server
    # We want to say that it should match a set of labels
  template:
    metadata:
      labels:
        component: server
    spec: 
    # The spec that is going to customize the exact behaviour of each of the Pods that get created.
      containers:
        - name: server
          image: xholyspirit/multi-server
          ports:
            - containerPort: 5000
          env:
            - name: REDIS_HOST
              value: redis-cluster-ip-service
            - name: REDIS_PORT
              value: '6379'
              # Whenever we provide an environment variable, we have to provide it as a string. 
            - name: PGUSER
              value: postgres
            - name: PGHOST
              value: postgres-cluster-ip-service
            - name: PGPORT
              value: '5432'
            - name: PGDATABASE
              value: postgres
            - name: PGPASSWORD
              # Name of the environment variable to be set in the container 
              valueFrom:
                secretKeyRef: 
                  name: pgpassword
                  # The name of the secret that we want this environment variable to come from.
                  key: PGPASSWORD
                  # A secret can store many key-value pairs

# Command to create a secret object:
# kubectl create secret generic <secret_name> --from-literal key=value
# create: imperative command to create a new object
# secret: Type of object we are going to create
# generic: Type of secret. We are saving an arbitrary number of key-value pairs together
# <secret_name>: Name of secret, for later reference in a pod config
# --from-literal: We are going to add the secret information into this command, as oppose to from file
# key=value: key-value pair of the secret information 

# Need to run this imperative command line to the environment when it is being deployed into production in the future.